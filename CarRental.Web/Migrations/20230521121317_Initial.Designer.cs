// <auto-generated />
using System;
using CarRental.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.Web.Migrations
{
    [DbContext(typeof(CarDbContext))]
    [Migration("20230521121317_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRental.Web.Models.Domain.CarOffer.CarOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarDeliverylocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarReturnLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriveDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturedImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GearboxDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Horsepower")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.Property<int>("YearOfProduction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CarOffers");
                });

            modelBuilder.Entity("CarRental.Web.Models.Domain.CarOffer.CarOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CarOrders");
                });

            modelBuilder.Entity("CarRental.Web.Models.Domain.CarOffer.CarTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarOfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarOfferId");

                    b.ToTable("CarTags");
                });

            modelBuilder.Entity("CarRental.Web.Models.Domain.CarOffer.ImageUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarOfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarOfferId");

                    b.ToTable("ImageUrls");
                });

            modelBuilder.Entity("CarRental.Web.Models.Domain.CarOffer.Tarrif", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarOfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("FullWeekendPrice")
                        .HasColumnType("float");

                    b.Property<double>("OneMonthPrice")
                        .HasColumnType("float");

                    b.Property<double>("OneNormalDayPrice")
                        .HasColumnType("float");

                    b.Property<double>("OneWeekPrice")
                        .HasColumnType("float");

                    b.Property<double>("OneWeekendDayPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CarOfferId")
                        .IsUnique();

                    b.ToTable("Tarrifs");
                });

            modelBuilder.Entity("CarRental.Web.Models.Domain.CarOffer.CarTag", b =>
                {
                    b.HasOne("CarRental.Web.Models.Domain.CarOffer.CarOffer", null)
                        .WithMany("Tags")
                        .HasForeignKey("CarOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Web.Models.Domain.CarOffer.ImageUrl", b =>
                {
                    b.HasOne("CarRental.Web.Models.Domain.CarOffer.CarOffer", null)
                        .WithMany("ImageUrls")
                        .HasForeignKey("CarOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Web.Models.Domain.CarOffer.Tarrif", b =>
                {
                    b.HasOne("CarRental.Web.Models.Domain.CarOffer.CarOffer", null)
                        .WithOne("Tarrifs")
                        .HasForeignKey("CarRental.Web.Models.Domain.CarOffer.Tarrif", "CarOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Web.Models.Domain.CarOffer.CarOffer", b =>
                {
                    b.Navigation("ImageUrls");

                    b.Navigation("Tags");

                    b.Navigation("Tarrifs")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
